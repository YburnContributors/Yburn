using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Yburn.Fireball;
using Yburn.Workers;

namespace Yburn.Worker.Tests
{
	[TestClass]
	public class QQonFireTests
	{
        /********************************************************************************************
		 * Public members, functions and properties
		 ********************************************************************************************/

        [TestMethod]
        public void CalculateInitialPopulations_CMS2012()
        {
            double[] ppYields = GetProtonProtonYieldsInQQonFire(ProtonProtonBaseline.CMS2012);
            double[] initialPopulations = BottomiumCascade.GetInitialPopulations(ppYields);
            AssertCorrectInitialPopulations_CMS2012(initialPopulations);
        }

        [TestMethod]
		public void CalculateQGPSuppressionFactorsBinWise_AveragedTemperature()
		{
			double[][][][] suppressionFactors = CalculateQGPSuppressionFactorsInQQonFire(
				DecayWidthEvaluationType.AveragedTemperature);
			AssertCorrectQGPSuppression_AveragedTemperature(suppressionFactors);
		}

		[TestMethod]
		public void CalculateQGPSuppressionFactorsBinWise_UnshiftedTemperature()
		{
			double[][][][] suppressionFactors = CalculateQGPSuppressionFactorsInQQonFire(
				DecayWidthEvaluationType.UnshiftedTemperature);
			AssertCorrectQGPSuppression_UnshiftedTemperature(suppressionFactors);
		}

		/********************************************************************************************
		 * Private/protected static members, functions and properties
		 ********************************************************************************************/

        private static double[] GetProtonProtonYieldsInQQonFire(
            ProtonProtonBaseline baseline
            )
        {
            QQonFire qqonFire = new QQonFire();
            PrivateObject privateQQonFire = new PrivateObject(qqonFire);
            privateQQonFire.SetField("FeedDown3P", 0.06);
            privateQQonFire.SetField("ProtonProtonBaseline", ProtonProtonBaseline.CMS2012);

            return (double[])privateQQonFire.Invoke("GetProtonProtonYields");
        }

        private static void AssertCorrectInitialPopulations_CMS2012(
            double[] initialPopulations
            )
        {
            Assert.AreEqual(13.81, initialPopulations[0], 1e-2);
            Assert.AreEqual(43.69, initialPopulations[1], 1e-2);
            Assert.AreEqual(17.73, initialPopulations[2], 1e-2);
            Assert.AreEqual(45.63, initialPopulations[3], 1e-2);
            Assert.AreEqual(10.89, initialPopulations[4], 1e-2);
            Assert.AreEqual(7.659e99, initialPopulations[5], 1e96);
        }

        private static double[][][][] CalculateQGPSuppressionFactorsInQQonFire(
			DecayWidthEvaluationType type
			)
		{
			QQonFire.StatusValues = new string[3];

			QQonFire qqonFire = new QQonFire();
			qqonFire.VariableNameValueList = GetQQonFireVariables(type);

			PrivateObject privateQQonFire = new PrivateObject(qqonFire);
			privateQQonFire.SetField("NumberCentralityBins",
                new int[] { 7, 1 });
			//privateQQonFire.SetField("CentralityBinStrings",
			//	new string[][] { new string[] { "", "", "", "", "", "", "" } });

			return (double[][][][])privateQQonFire.Invoke("CalculateQGPSuppressionFactors");
		}

		private static Dictionary<string, string> GetQQonFireVariables(
			DecayWidthEvaluationType type
			)
		{
			Dictionary<string, string> nameValuePairs = new Dictionary<string, string>();
			nameValuePairs.Add("ExpansionMode", "Transverse");
			nameValuePairs.Add("DecayWidthType", "GammaTot");
			nameValuePairs.Add("TemperatureProfile", "NmixPHOBOS13");
			nameValuePairs.Add("DiffusenessA", "0.546");
			nameValuePairs.Add("DiffusenessB", "0.546");
			nameValuePairs.Add("NucleonNumberA", "208");
			nameValuePairs.Add("NucleonNumberB", "208");
			nameValuePairs.Add("PotentialTypes", "Complex");
			nameValuePairs.Add("TransverseMomenta", "6");
			nameValuePairs.Add("NuclearRadiusA", "6.62");
			nameValuePairs.Add("NuclearRadiusB", "6.62");
			nameValuePairs.Add("CentralityBinBoundaries", "0,5,10,20,30,40,50,100;0,100");
            //old impact parameters from the time before the bin became variable
            nameValuePairs.Add("ImpactParamsAtBinBoundaries", "0,3.43,4.90,6.97,8.56,9.90,11.08,20.8;0,20.8");
            nameValuePairs.Add("InitialCentralTemperature", "550");
			nameValuePairs.Add("MinimalCentralTemperature", "160");
			nameValuePairs.Add("FormationTimes", "0.3,0.3,0.3,0.3,0.3,0.3");
			nameValuePairs.Add("ThermalTime", "0.1");
			nameValuePairs.Add("GridCellSize", "0.4");
			nameValuePairs.Add("NumberGridCells", "26");
			nameValuePairs.Add("BeamRapidity", "7.99");
			nameValuePairs.Add("DecayWidthEvaluationType", type.ToString());

			return nameValuePairs;
		}

		private static void AssertCorrectQGPSuppression_AveragedTemperature(double[][][][] suppressionFactors)
		{
			Assert.AreEqual(0.691, suppressionFactors[0][0][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.15, suppressionFactors[0][0][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.19, suppressionFactors[0][0][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.0441, suppressionFactors[0][0][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.0581, suppressionFactors[0][0][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0238, suppressionFactors[0][0][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.718, suppressionFactors[0][1][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.175, suppressionFactors[0][1][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.219, suppressionFactors[0][1][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.0535, suppressionFactors[0][1][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.0684, suppressionFactors[0][1][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0299, suppressionFactors[0][1][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.758, suppressionFactors[0][2][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.226, suppressionFactors[0][2][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.278, suppressionFactors[0][2][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.0687, suppressionFactors[0][2][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.089, suppressionFactors[0][2][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0401, suppressionFactors[0][2][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.814, suppressionFactors[0][3][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.328, suppressionFactors[0][3][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.379, suppressionFactors[0][3][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.105, suppressionFactors[0][3][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.132, suppressionFactors[0][3][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0605, suppressionFactors[0][3][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.868, suppressionFactors[0][4][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.499, suppressionFactors[0][4][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.494, suppressionFactors[0][4][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.16, suppressionFactors[0][4][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.207, suppressionFactors[0][4][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0943, suppressionFactors[0][4][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.918, suppressionFactors[0][5][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.681, suppressionFactors[0][5][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.635, suppressionFactors[0][5][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.273, suppressionFactors[0][5][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.34, suppressionFactors[0][5][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.161, suppressionFactors[0][5][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.976, suppressionFactors[0][6][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.892, suppressionFactors[0][6][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.869, suppressionFactors[0][6][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.671, suppressionFactors[0][6][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.743, suppressionFactors[0][6][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.486, suppressionFactors[0][6][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.769, suppressionFactors[1][0][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.284, suppressionFactors[1][0][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.319, suppressionFactors[1][0][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.106, suppressionFactors[1][0][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.131, suppressionFactors[1][0][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0647, suppressionFactors[1][0][0][(int)BottomiumState.x3P], 3e-3);
		}

		private static void AssertCorrectQGPSuppression_UnshiftedTemperature(double[][][][] suppressionFactors)
		{
			Assert.AreEqual(0.658, suppressionFactors[0][0][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.126, suppressionFactors[0][0][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.162, suppressionFactors[0][0][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.0388, suppressionFactors[0][0][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.0511, suppressionFactors[0][0][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0216, suppressionFactors[0][0][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.686, suppressionFactors[0][1][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.147, suppressionFactors[0][1][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.188, suppressionFactors[0][1][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.0463, suppressionFactors[0][1][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.0595, suppressionFactors[0][1][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0266, suppressionFactors[0][1][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.73, suppressionFactors[0][2][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.187, suppressionFactors[0][2][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.239, suppressionFactors[0][2][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.0614, suppressionFactors[0][2][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.0789, suppressionFactors[0][2][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0361, suppressionFactors[0][2][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.79, suppressionFactors[0][3][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.273, suppressionFactors[0][3][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.338, suppressionFactors[0][3][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.0901, suppressionFactors[0][3][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.116, suppressionFactors[0][3][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0547, suppressionFactors[0][3][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.848, suppressionFactors[0][4][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.411, suppressionFactors[0][4][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.459, suppressionFactors[0][4][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.144, suppressionFactors[0][4][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.18, suppressionFactors[0][4][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0864, suppressionFactors[0][4][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.902, suppressionFactors[0][5][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.617, suppressionFactors[0][5][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.596, suppressionFactors[0][5][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.231, suppressionFactors[0][5][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.3, suppressionFactors[0][5][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.14, suppressionFactors[0][5][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.968, suppressionFactors[0][6][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.865, suppressionFactors[0][6][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.84, suppressionFactors[0][6][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.615, suppressionFactors[0][6][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.685, suppressionFactors[0][6][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.44, suppressionFactors[0][6][0][(int)BottomiumState.x3P], 3e-3);

			Assert.AreEqual(0.741, suppressionFactors[1][0][0][(int)BottomiumState.Y1S], 3e-3);
			Assert.AreEqual(0.244, suppressionFactors[1][0][0][(int)BottomiumState.x1P], 3e-3);
			Assert.AreEqual(0.285, suppressionFactors[1][0][0][(int)BottomiumState.Y2S], 3e-3);
			Assert.AreEqual(0.0937, suppressionFactors[1][0][0][(int)BottomiumState.x2P], 3e-3);
			Assert.AreEqual(0.116, suppressionFactors[1][0][0][(int)BottomiumState.Y3S], 3e-3);
			Assert.AreEqual(0.0582, suppressionFactors[1][0][0][(int)BottomiumState.x3P], 3e-3);
		}
	}
}