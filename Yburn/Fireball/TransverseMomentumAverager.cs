//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Instances of the class PTAverager calculate averages of pT-dependent quantities weighted with the    //
// Upsilon production cross section as measured by CMS in 7 TeV pp-collisions at LHC (Phys. Rev. D 83,  //
// 112004 (2011)).                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
using System;

namespace Yburn.Fireball
{
	public static class TransverseMomentumAverager
	{
		/********************************************************************************************
		 * Public static members, functions and properties
		 ********************************************************************************************/

		public static double Calculate(
			BottomiumState eState,
			double[] pT,
			double[] values
			)
		{
			if(pT.Length != values.Length)
			{
				throw new Exception("Sizes of PT- and Value-arrays do not match.");
			}

			return CalculateUnnormalizedAverage(eState, pT, values) / CalculateSum(eState, pT);
		}

		/********************************************************************************************
		* Private/protected static members, functions and properties
		********************************************************************************************/

		private static int NumberBins = 30;

		// measured cross section in the pT-bins for the different states
		private static double[,] CrossSection =
		{
			{
				0.30, 0.90, 1.04, 0.88, 0.90,
				0.82, 0.64, 0.51, 0.33, 0.25,
				0.36/2.0, 0.36/2.0, 0.18/2.0, 0.18/2.0, 0.14/3.0,
				0.14/3.0, 0.14/3.0, 0.06/3.0, 0.06/3.0, 0.06/3.0,
				0.06/10.0, 0.06/10.0, 0.06/10.0, 0.06/10.0, 0.06/10.0,
				0.06/10.0, 0.06/10.0, 0.06/10.0, 0.06/10.0, 0.06/10.0
			},
			{
				0.30, 0.90, 1.04, 0.88, 0.90,
				0.82, 0.64, 0.51, 0.33, 0.25,
				0.36/2.0, 0.36/2.0, 0.18/2.0, 0.18/2.0, 0.14/3.0,
				0.14/3.0, 0.14/3.0, 0.06/3.0, 0.06/3.0, 0.06/3.0,
				0.06/10.0, 0.06/10.0, 0.06/10.0, 0.06/10.0, 0.06/10.0,
				0.06/10.0, 0.06/10.0, 0.06/10.0, 0.06/10.0, 0.06/10.0
			},
			{
				0.25/2.0, 0.25/2.0, 0.48/2.0, 0.48/2.0, 0.41/2.0,
				0.41/2.0, 0.41/3.0, 0.41/3.0, 0.41/3.0, 0.21/3.0,
				0.21/3.0, 0.21/3.0, 0.09/4.0, 0.09/4.0, 0.09/4.0,
				0.09/4.0, 0.04/4.0, 0.04/4.0, 0.04/4.0, 0.04/4.0,
				0.02/10.0, 0.02/10.0, 0.02/10.0, 0.02/10.0, 0.02/10.0,
				0.02/10.0, 0.02/10.0, 0.02/10.0, 0.02/10.0, 0.02/10.0
			},
			{
				0.25/2.0, 0.25/2.0, 0.48/2.0, 0.48/2.0, 0.41/2.0,
				0.41/2.0, 0.41/3.0, 0.41/3.0, 0.41/3.0, 0.21/3.0,
				0.21/3.0, 0.21/3.0, 0.09/4.0, 0.09/4.0, 0.09/4.0,
				0.09/4.0, 0.04/4.0, 0.04/4.0, 0.04/4.0, 0.04/4.0,
				0.02/10.0, 0.02/10.0, 0.02/10.0, 0.02/10.0, 0.02/10.0,
				0.02/10.0, 0.02/10.0, 0.02/10.0, 0.02/10.0, 0.02/10.0
			},
			{
				0.26/3.0, 0.26/3.0, 0.26/3.0, 0.29/3.0, 0.29/3.0,
				0.29/3.0, 0.24/3.0, 0.24/3.0, 0.24/3.0, 0.16/5.0,
				0.16/5.0, 0.16/5.0, 0.16/5.0, 0.16/5.0, 0.05/6.0,
				0.05/6.0, 0.05/6.0, 0.05/6.0, 0.05/6.0, 0.05/6.0,
				0.03/10.0, 0.03/10.0, 0.03/10.0, 0.03/10.0, 0.03/10.0,
				0.03/10.0, 0.03/10.0, 0.03/10.0, 0.03/10.0, 0.03/10.0
			},
			{
				0.26/3.0, 0.26/3.0, 0.26/3.0, 0.29/3.0, 0.29/3.0,
				0.29/3.0, 0.24/3.0, 0.24/3.0, 0.24/3.0, 0.16/5.0,
				0.16/5.0, 0.16/5.0, 0.16/5.0, 0.16/5.0, 0.05/6.0,
				0.05/6.0, 0.05/6.0, 0.05/6.0, 0.05/6.0, 0.05/6.0,
				0.03/10.0, 0.03/10.0, 0.03/10.0, 0.03/10.0, 0.03/10.0,
				0.03/10.0, 0.03/10.0, 0.03/10.0, 0.03/10.0, 0.03/10.0
			}
		};

		// = normalization constant
		private static double[] TotalCrossSection = { 7.37, 7.37, 1.91, 1.91, 1.03, 1.03 };

		private static double CalculateUnnormalizedAverage(
			BottomiumState eState,
			double[] pT,
			double[] values
			)
		{
			double average = 0;
			for(int k = 0; k < pT.Length; k++)
			{
				for(int j = 0; j < NumberBins; j++)
				{
					if(pT[k] >= j && pT[k] < j + 1)
					{
						average += CrossSection[(int)eState, j] * values[k];
					}
				}
			}

			return average;
		}

		private static double CalculateSum(
			BottomiumState eState,
			double[] pT
			)
		{
			double norm = 0;
			for(int k = 0; k < pT.Length; k++)
			{
				for(int j = 0; j < NumberBins; j++)
				{
					if(pT[k] >= j && pT[k] < j + 1)
					{
						norm += CrossSection[(int)eState, j];
					}
				}
			}

			return norm;
		}

		/********************************************************************************************
		 * Private/protected members, functions and properties
		 ********************************************************************************************/
	}
}