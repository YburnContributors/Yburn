/**************************************************************************************************
 * The class QQonFire is a WorkerApp and performs numerical calculations concerned with a given
 * quarkonium distribution within the QGP formed in the fireball in relativistic heavy ion
 * collisions. It includes the class Fireball and is capable of performing two-dimensional perfect
 * fluid-hydrodynamics of a transverse expanding medium in a Bjorken-spacetime. QQonFire contains
 * methods for the calculation of centrality bin-boundaries, nuclear modification factors (RAA),
 * snapshots of the fireball evolution and decay cascade calculations within the bottomium family.
 **************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;
using Yburn.Fireball;
using Yburn.Interfaces;
using Yburn.QQState;
using Yburn.Util;

namespace Yburn.Workers
{
	/********************************************************************************************
	 * Enums
	 ********************************************************************************************/

	public class QQonFire : Worker
	{
		/********************************************************************************************
		 * Public static members, functions and properties
		 ********************************************************************************************/

		public static string[] BinBoundsStatusTitles
		{
			get
			{
				return new string[] { "b", "Ncoll", "Npart", "dSigma/db", "Sigma" };
			}
		}

		public static string[] DirectPionDecayWidthsStatusTitles
		{
			get
			{
				return new string[] { "b", "Ncoll", "NcollQGP", "NcollPion" };
			}
		}

		public static string[] SnapshotStatusTitles
		{
			get
			{
				return new string[] { "Time" };
			}
		}

		public static string[] SuppressionStatusTitles
		{
			get
			{
				return new string[] { "ImpactParam (fm)", "InitialCentralTemperature (MeV)", "LifeTime (fm/c)" };
			}
		}

		/********************************************************************************************
		 * Constructors
		 ********************************************************************************************/

		public QQonFire()
			: base()
		{
			InitializeVariables();
		}

		/********************************************************************************************
		 * Public members, functions and properties
		 ********************************************************************************************/

		public override bool CanDoJob(
			string jobId
			)
		{
			return jobId == "CalculateBinBoundaries"
				|| jobId == "CalculateDirectPionDecayWidths"
				|| jobId == "MakeSnapshots"
				|| jobId == "ShowBranchingRatio"
				|| jobId == "ShowCumulativeMatrix"
				|| jobId == "ShowInverseCumulativeMatrix"
				|| jobId == "ShowY1SFeedDown"
				|| jobId == "ShowDecayWidthInput"
				|| jobId == "ShowInitialPopulations"
				|| jobId == "ShowSnapsX"
				|| jobId == "ShowSnapsY"
				|| jobId == "ShowSnapsXY"
				|| jobId == "CalculateSuppression";
		}

		protected override void StartJob(
			string jobId
			)
		{
			switch(jobId)
			{
				case "CalculateBinBoundaries":
					CalculateBinBoundaries();
					break;

				case "CalculateDirectPionDecayWidths":
					CalculateDirectPionDecayWidths();
					break;

				case "MakeSnapshots":
					MakeSnapshots();
					break;

				case "ShowBranchingRatio":
					ShowBranchingRatioMatrix();
					break;

				case "ShowCumulativeMatrix":
					ShowCumulativeMatrix();
					break;

				case "ShowInverseCumulativeMatrix":
					ShowInverseCumulativeMatrix();
					break;

				case "ShowY1SFeedDown":
					ShowY1SFeedDown();
					break;

				case "ShowDecayWidthInput":
					ShowDecayWidthInput();
					break;

				case "ShowInitialPopulations":
					ShowInitialPopulations();
					break;

				case "ShowSnapsX":
					ShowSnapsX();
					break;

				case "ShowSnapsXY":
					ShowSnapsXY();
					break;

				case "ShowSnapsY":
					ShowSnapsY();
					break;

				case "CalculateSuppression":
					CalculateSuppression();
					break;

				default:
					throw new InvalidJobException(jobId);
			}
		}

		public void CalculateDirectPionDecayWidths()
		{
			PrepareJob("CalculateDirectPionDecayWidths", DirectPionDecayWidthsStatusTitles);

			List<double> impactParams = new List<double>();
			List<double> nCollQGPs = new List<double>();
			List<double> nCollPions = new List<double>();
			List<double> nColls = new List<double>();
			int step = 0;
			do
			{
				// quit here if process has been aborted
				if(JobCancelToken.IsCancellationRequested)
				{
					LogMessages.Clear();
					LogMessages.Append(LogHeader + "#\r\n#\r\n" + LogFooter);
					return;
				}

				impactParams.Add(step * GridCellSize);

				using(Fireball.Fireball fireball = CreateFireballToCalcDirectPionDecayWidth(
					impactParams[step]))
				{
					//Set BjorkenLifeTime for the LogHeader
					if(step == 0)
					{
						BjorkenLifeTime = fireball.BjorkenLifeTime;
					}

					//calculate the areas
					double nCollQGP;
					double nCollPion;
					fireball.CalculateNcolls(MinimalCentralTemperature, out nCollQGP, out nCollPion);
					nCollQGPs.Add(nCollQGP);
					nCollPions.Add(nCollPion);
					nColls.Add(fireball.IntegrateFireballField(Fireball.FireballFields.Ncoll));

					StatusValues[0] = impactParams[step].ToString("G3", CultureInfo.InvariantCulture);
					StatusValues[1] = nColls[step].ToString("G4", CultureInfo.InvariantCulture);
					StatusValues[2] = nCollQGPs[step].ToString("G4", CultureInfo.InvariantCulture);
					StatusValues[3] = nCollPions[step].ToString("G4", CultureInfo.InvariantCulture);
				}

				step++;
			}
			while((step == 1 ? true : nColls[step - 1] > 1));

			// quit here if process has been aborted
			if(JobCancelToken.IsCancellationRequested)
			{
				LogMessages.Clear();
				LogMessages.Append(LogHeader + "#\r\n#\r\n" + LogFooter);
				return;
			}

			//prepare output
			LogMessages.Clear();
			LogMessages.Append(LogHeader);
			LogMessages.AppendFormat("#\r\n#\r\n#{0,-5}{1,-12}{2,-12}{3,-12}\r\n",
				"b", "Ncoll", "NcollQGP", "NcollPion");
			LogMessages.AppendFormat("#{0,-5}{1,-12}{2,-12}{3,-12}\r\n\r\n",
				"(fm)", "", "", "");
			for(int i = 0; i < impactParams.Count; i++)
			{
				LogMessages.AppendLine(string.Format("{0,-6}{1,-12}{2,-12}{3,-12}",
					impactParams[i].ToString("G3", CultureInfo.InvariantCulture),
					nColls[i].ToString("G4", CultureInfo.InvariantCulture),
					nCollQGPs[i].ToString("G4", CultureInfo.InvariantCulture),
					nCollPions[i].ToString("G4", CultureInfo.InvariantCulture)));
			}

			LogMessages.Append(LogFooter);

			File.WriteAllText(YburnConfigFile.OutputPath + Outfile, LogMessages.ToString());
		}

		public void CalculateBinBoundaries()
		{
			PrepareJob("CalculateBinBoundaries", BinBoundsStatusTitles);

			List<double> impactParams;
			List<double> nColls;
			List<double> nParts;
			List<double> dSigmadbs;
			List<double> sigmas;
			CalculateBinBoundaries(out impactParams, out nColls, out nParts, out dSigmadbs, out sigmas);

			if(JobCancelToken.IsCancellationRequested)
			{
				LogMessages.Clear();
				LogMessages.Append(LogHeader + "#\r\n#\r\n" + LogFooter);
				return;
			}

			//prepare output
			LogMessages.Clear();
			LogMessages.Append(LogHeader);
			LogMessages.AppendFormat("#\r\n#\r\n#{0,5}{1,12}{2,12}{3,12}{4,12}\r\n",
				"b", "Ncoll", "Npart", "dSigma/db", "Sigma");
			LogMessages.AppendFormat("#{0,5}{1,12}{2,12}{3,12}{4,12}\r\n",
				"(fm)", "", "", "(fm)", "(fm^2)");
			for(int i = 0; i < impactParams.Count; i++)
			{
				LogMessages.AppendLine(string.Format("{0,6}{1,12}{2,12}{3,12}{4,12}",
					impactParams[i].ToString("G3", CultureInfo.InvariantCulture),
					nColls[i].ToString("G4", CultureInfo.InvariantCulture),
					nParts[i].ToString("G4", CultureInfo.InvariantCulture),
					dSigmadbs[i].ToString("G4", CultureInfo.InvariantCulture),
					sigmas[i].ToString("G4", CultureInfo.InvariantCulture)));
			}

			LogMessages.AppendLine(string.Format("\r\n\r\n#{0,11}{1,19}{2,12}",
                "Centrality",
                "Bin size",
                "<Npart>"));
			for(int binGroupIndex = 0; binGroupIndex < NumberCentralityBins.Length; binGroupIndex++)
			{
                LogMessages.AppendLine("#");
                for (int binIndex = 0; binIndex < NumberCentralityBins[binGroupIndex]; binIndex++)
                {
                    LogMessages.AppendLine(string.Format("#{0,11}{1,8} < b < {2,4}{3,12}",
                        CentralityBinStrings[binGroupIndex][binIndex],
                        ImpactParamsAtBinBoundaries[binGroupIndex][binIndex].ToString("G4", CultureInfo.InvariantCulture),
                        ImpactParamsAtBinBoundaries[binGroupIndex][binIndex + 1].ToString("G4", CultureInfo.InvariantCulture),
                        MeanParticipantsInBin[binGroupIndex][binIndex].ToString("G4", CultureInfo.InvariantCulture)));
                }
            }

			LogMessages.Append(LogFooter);

			File.WriteAllText(YburnConfigFile.OutputPath + Outfile, LogMessages.ToString());
		}

		private void CalculateBinBoundaries(
			out List<double> impactParams,
			out List<double> nColls,
			out List<double> nParts,
			out List<double> dSigmadbs,
			out List<double> sigmas
				)
		{
			BinBoundaryCalculator calculator = new BinBoundaryCalculator(CreateFireballParam(),
				JobCancelToken);
			calculator.StatusValues = StatusValues;
			calculator.Calculate(CentralityBinBoundaries);

			impactParams = calculator.ImpactParams;
			nColls = calculator.Ncolls;
			nParts = calculator.Nparts;
			dSigmadbs = calculator.DSigmaDbs;
			sigmas = calculator.Sigmas;

			NumberCentralityBins = calculator.NumberCentralityBins;
			CentralityBinStrings = GetCentralityBinStrings();
			ImpactParamsAtBinBoundaries = calculator.ImpactParamsAtBinBoundaries;
			ParticipantsAtBinBoundaries = calculator.ParticipantsAtBinBoundaries;
			MeanParticipantsInBin = calculator.MeanParticipantsInBin;
		}

		public void CalculateSuppression()
		{
			PrepareJob("CalculateSuppression", BinBoundsStatusTitles);

			List<double> impactParams;
			List<double> nColls;
			List<double> nParts;
			List<double> dSigmadbs;
			List<double> sigmas;
			CalculateBinBoundaries(out impactParams, out nColls, out nParts, out dSigmadbs, out sigmas);

			SetStatusVariables(SuppressionStatusTitles);
			DetermineMaxLifeTime();

			double[][][][] qgpSuppressionFactors = CalculateQGPSuppressionFactors();

			// quit here if process has been aborted
			if(JobCancelToken.IsCancellationRequested)
			{
				LogMessages.Clear();
				LogMessages.Append(LogHeader + "#\r\n#\r\n" + LogFooter);
				return;
			}

			//The preliminary suppression factors have been calculated. Now come the final suppression factors
			//and output to LogStream.
			StringBuilder results = new StringBuilder();

			results.AppendFormat("#Preliminary suppression factors:\r\n#\r\n#{0,11}{1,12}{2,12}",
                "Centrality",
                "<Npart>",
                "pT (GeV/c)");
			foreach(string sStateName in Enum.GetNames(typeof(BottomiumState)))
			{
				results.AppendFormat("{0,12}", string.Format("RAAQGP({0})", sStateName));
			}

			results.Append("\r\n#\r\n");

            for(int binGroupIndex = 0; binGroupIndex < NumberCentralityBins.Length; binGroupIndex++)
            {
                for (int binIndex = 0; binIndex < NumberCentralityBins[binGroupIndex]; binIndex++)
                {
                    for (int pTIndex = 0; pTIndex < TransverseMomenta.Length; pTIndex++)
                    {
                        results.AppendFormat("{0,12}{1,12}{2,12}",
                            CentralityBinStrings[binGroupIndex][binIndex],
                            MeanParticipantsInBin[binGroupIndex][binIndex].ToString("G4", CultureInfo.InvariantCulture),
                            TransverseMomenta[pTIndex].ToString("G4", CultureInfo.InvariantCulture));

                        for (int stateIndex = 0; stateIndex < NumberBottomiumStates; stateIndex++)
                        {
                            results.AppendFormat("{0,12}",
                                qgpSuppressionFactors[binGroupIndex][binIndex][pTIndex][stateIndex].ToString("G3", CultureInfo.InvariantCulture));
                        }

                        results.AppendLine();
                    }

                    results.AppendFormat("{0,12}{1,12}{2,12}",
                        CentralityBinStrings[binGroupIndex][binIndex],
                        MeanParticipantsInBin[binGroupIndex][binIndex].ToString("G4", CultureInfo.InvariantCulture),
                        "<pT>");

                    foreach (BottomiumState state in Enum.GetValues(typeof(BottomiumState)))
                    {
                        double[] rAAQGPsBinValues = new double[TransverseMomenta.Length];
                        for (int pTIndex = 0; pTIndex < TransverseMomenta.Length; pTIndex++)
                        {
                            rAAQGPsBinValues[pTIndex] = qgpSuppressionFactors[binGroupIndex][binIndex][pTIndex][(int)state];
                        }

                        results.AppendFormat("{0,12}",
                            TransverseMomentumAverager.Calculate(state, TransverseMomenta, rAAQGPsBinValues)
                            .ToString("G3", CultureInfo.InvariantCulture));
                    }

                    results.AppendLine();
                }

                if (binGroupIndex < NumberCentralityBins.Length - 1)
                {
                    results.AppendLine();
                }
            }


			results.AppendFormat(
                "\r\n\r\n#Final suppression factors:\r\n#\r\n#{0,11}{1,12}{2,12}{3,15}{4,15}{5,15}{6,15}{7,15}\r\n#\r\n",
                "Centrality",
				"<Npart>",
				"pT (GeV/c)",
				"RAA(Y1S)",
				"RAA(Y2S)",
				"RAA(Y3S)",
				"(2S/1S)PbPb-pp",
				"(3S/1S)PbPb-pp");

			//calculate final suppression factors
			double[][] rAAs = new double[TransverseMomenta.Length][];
            //run through the centrality bin groups
            for (int binGroupIndex = 0; binGroupIndex < NumberCentralityBins.Length; binGroupIndex++)
            {
                //run through the centrality bins
                for (int binIndex = 0; binIndex < NumberCentralityBins[binGroupIndex]; binIndex++)
                {
                    //run through the pT bins
                    for (int pTIndex = 0; pTIndex < TransverseMomenta.Length; pTIndex++)
                    {
                        rAAs[pTIndex] = CalculateFullSuppressionFactors(qgpSuppressionFactors[binGroupIndex][binIndex][pTIndex]);

                        results.AppendFormat("{0,12}{1,12}{2,12}",
                            CentralityBinStrings[binGroupIndex][binIndex],
                            MeanParticipantsInBin[binGroupIndex][binIndex].ToString("G4", CultureInfo.InvariantCulture),
                            TransverseMomenta[pTIndex].ToString("G4", CultureInfo.InvariantCulture));

                        for (int l = 0; l < 5; l++)
                        {
                            results.AppendFormat("{0,15}",
                                rAAs[pTIndex][l].ToString("G3", CultureInfo.InvariantCulture));
                        }

                        results.AppendLine();
                    }

                    results.AppendFormat("{0,12}{1,12}{2,12}",
                        CentralityBinStrings[binGroupIndex][binIndex],
                        MeanParticipantsInBin[binGroupIndex][binIndex].ToString("G4", CultureInfo.InvariantCulture),
                        "<pT>");

                    //average of all pT values
                    for (int l = 0; l < 5; l++)
                    {
                        double[] rAABinValues = new double[TransverseMomenta.Length];
                        for (int pTIndex = 0; pTIndex < TransverseMomenta.Length; pTIndex++)
                        {
                            rAABinValues[pTIndex] = rAAs[pTIndex][l];
                        }

                        results.AppendFormat("{0,15}", TransverseMomentumAverager.Calculate((BottomiumState)l, TransverseMomenta, rAABinValues)
                            .ToString("G3", CultureInfo.InvariantCulture));
                    }

                    results.AppendLine();
                }

                if (binGroupIndex < NumberCentralityBins.Length - 1)
                {
                    results.AppendLine();
                }
            }

            //store information in LogString, print it out and save it to file
            string logString = LogHeader + "\r\n\r\n" + results.ToString() + LogFooter;

			File.WriteAllText(YburnConfigFile.OutputPath + Outfile, logString);

			LogMessages.Clear();
			LogMessages.Append(logString);
		}

		public void ShowBranchingRatioMatrix()
		{
			CurrentJobTitle = "ShowBranchingRatioMatrix";

			LogMessages.Clear();
			LogMessages.AppendFormat("Branching ratio matrix:\r\n\r\n{0}\r\n\r\n",
				BottomiumCascade.GetBranchingRatioMatrixString());
		}

		public void ShowCumulativeMatrix()
		{
			CurrentJobTitle = "ShowCumulativeMatrix";

			LogMessages.Clear();
			LogMessages.AppendFormat("Cumulative matrix:\r\n\r\n{0}\r\n\r\n",
				BottomiumCascade.GetCumulativeMatrixString());
		}

		public void ShowInverseCumulativeMatrix()
		{
			CurrentJobTitle = "ShowInverseCumulativeMatrix";

			LogMessages.Clear();
			LogMessages.AppendFormat("Inverse cumulative matrix:\r\n\r\n{0}\r\n\r\n",
				BottomiumCascade.GetInverseCumulativeMatrixString());
		}

		public void ShowDecayWidthInput()
		{
			CurrentJobTitle = "ShowDecayWidthInput";

			List<KeyValuePair<double, double>>[] tGammaList = TemperatureDecayWidthList.GetList(
				GetQQDataPathFile(), DecayWidthType, PotentialTypes);

			LogMessages.Clear();
			foreach(BottomiumState state in Enum.GetValues(typeof(BottomiumState)))
			{
				LogMessages.AppendFormat("{0,16}", state.ToString());
			}

			LogMessages.AppendLine();
			LogMessages.AppendLine();

			foreach(BottomiumState state in Enum.GetValues(typeof(BottomiumState)))
			{
				LogMessages.AppendFormat("{0,6}{1,10}", "T", DecayWidthType);
			}

			LogMessages.AppendLine();
			LogMessages.AppendLine();

			for(int i = 0; i < tGammaList[0].Count; i++)
			{
				foreach(BottomiumState state in Enum.GetValues(typeof(BottomiumState)))
				{
					if(i < tGammaList[(int)state].Count)
					{
						LogMessages.AppendFormat("{0,6}{1,10}",
							tGammaList[(int)state][i].Key.ToString("G4", CultureInfo.InvariantCulture),
							tGammaList[(int)state][i].Value.ToString("G4", CultureInfo.InvariantCulture));
					}
					else
					{
						LogMessages.AppendFormat("{0,16}", "");
					}
				}

				LogMessages.AppendLine();
			}

			LogMessages.AppendLine();
			LogMessages.AppendLine();
		}

		public void ShowInitialPopulations()
		{
			CurrentJobTitle = "ShowInitialPopulations";

			double[] ppPopulations = new double[] {
					1.0,							//Y1S
					0.271,						//x1P
					0.56,							//Y2S
					0.105,						//x2P
					0.41,							//Y3S
					FeedDown3P
				};

			LogMessages.Clear();
			LogMessages.AppendFormat("Initial populations:\r\n\r\n{0}\r\n\r\n",
				BottomiumCascade.GetInitialPopulationsString(ppPopulations));
		}

		public void ShowSnapsX()
		{
			Process.Start("wgnuplot", "--persist "
				+ BuildPlotPathFile(YburnConfigFile.OutputPath + Outfile) + "-plotX.plt");
		}

		public void ShowSnapsY()
		{
			Process.Start("wgnuplot", "--persist "
				+ BuildPlotPathFile(YburnConfigFile.OutputPath + Outfile) + "-plotY.plt");
		}

		public void ShowSnapsXY()
		{
			Process.Start("wgnuplot", "--persist "
				+ BuildPlotPathFile(YburnConfigFile.OutputPath + Outfile) + "-plotXY.plt");
		}

		public void ShowY1SFeedDown()
		{
			CurrentJobTitle = "ShowY1SFeedDown";

			double[] ppPopulations = new double[] {
					1.0,							//Y1S
					0.271,						//x1P
					0.56,							//Y2S
					0.105,						//x2P
					0.41,							//Y3S
					FeedDown3P
				};

			LogMessages.Clear();
			LogMessages.AppendFormat("Y1S feed down:\r\n\r\n{0}\r\n\r\n",
				BottomiumCascade.GetY1SFeedDownString(ppPopulations));
		}

		/********************************************************************************************
		 * Private/protected static members, functions and properties
		 ********************************************************************************************/

		private static string FtexsLogPathFile
		{
			get
			{
				return YburnConfigFile.OutputPath + "FtexsLogFile.txt";
			}
		}

		private static readonly int NumberBottomiumStates
			= Enum.GetValues(typeof(BottomiumState)).Length;

		/********************************************************************************************
		 * Private/protected members, functions and properties
		 ********************************************************************************************/

		private double BjorkenLifeTime;

		private DecayWidthType DecayWidthType;

		private double DiffusenessA;

		private double DiffusenessB;

		private ExpansionMode ExpansionMode;

		private double FeedDown3P;

		private string FireballFields;

		private double ImpactParam;

		private double LifeTime;

		private int NucleonNumberA;

		private int NucleonNumberB;

		private string Outfile;

		private string PotentialTypes;

		private TemperatureProfile TemperatureProfile;

		private double[] TransverseMomenta;

		private double NuclearRadiusA;

		private double NuclearRadiusB;

		private DecayWidthEvaluationType DecayWidthEvaluationType;

		private double[] DecayWidthAveragingAngles;

		private double SnapRate;

		private int[][] CentralityBinBoundaries;

		private int[] NumberCentralityBins;

		private string[][] CentralityBinStrings;

		private double[][] ImpactParamsAtBinBoundaries;

		private double[][] ParticipantsAtBinBoundaries;

		private double[][] MeanParticipantsInBin;

		private string BottomiumStates;

		private double InitialCentralTemperature;

		private double MinimalCentralTemperature;

        private double[] FormationTimes;

		private double ThermalTime;

		private double GridCellSize;

		private int NumberGridCells;

		private double BeamRapidity;

		private void InitializeVariables()
		{
			Outfile = "stdout.txt";
		}

		private Fireball.Fireball CreateFireball()
		{
			return new Fireball.Fireball(CreateFireballParam());
		}

		private Fireball.Fireball CreateFireballToCalcDirectPionDecayWidth(
			double impactParam
			)
		{
			FireballParam param = CreateFireballParam();
			param.ImpactParamFm = impactParam;
			param.TransverseMomentaGeV = new double[] { 0 };
			param.ExpansionMode = ExpansionMode.Longitudinal;

			return new Fireball.Fireball(param);
		}

		private Fireball.Fireball CreateFireballToDetermineMaxLifeTime()
		{
			FireballParam param = CreateFireballParam();
			param.ImpactParamFm = 0;
			param.TransverseMomentaGeV = new double[] { 0 };

			return new Fireball.Fireball(param);
		}

		private FireballParam CreateFireballParam()
		{
			FireballParam param = new FireballParam();

			param.NucleonNumberA = NucleonNumberA;
			param.DiffusenessFmA = DiffusenessA;
			param.NuclearRadiusFmA = NuclearRadiusA;
			param.NucleonNumberB = NucleonNumberB;
			param.DiffusenessFmB = DiffusenessB;
			param.NuclearRadiusFmB = NuclearRadiusB;
			param.GridCellSizeFm = GridCellSize;
			param.NumberGridCells = NumberGridCells;
			param.ImpactParamFm = ImpactParam;
			param.ThermalTimeFm = ThermalTime;
			param.FormationTimesFm = FormationTimes;
			param.InitialCentralTemperatureMeV = InitialCentralTemperature;
			param.MinimalCentralTemperatureMeV = MinimalCentralTemperature;
			param.BeamRapidity = BeamRapidity;
			param.TransverseMomentaGeV = TransverseMomenta;
			param.DecayWidthEvaluationType = DecayWidthEvaluationType;
			param.ExpansionMode = ExpansionMode;
			param.TemperatureProfile = TemperatureProfile;
			param.FtexsLogPathFile = FtexsLogPathFile;
			param.DecayWidthAveragingAngles = DecayWidthAveragingAngles;
			param.TemperatureDecayWidthList = TemperatureDecayWidthList.GetList(
					GetQQDataPathFile(), DecayWidthType, PotentialTypes);

			return param;
		}

		private string BuildPlotPathFile(
			string outPathFile
			)
		{
			int indexOfDot = outPathFile.LastIndexOf(".");
			string tempPathFile = outPathFile.Substring(0, indexOfDot);
			string extension = outPathFile.Substring(indexOfDot, outPathFile.Length - indexOfDot);
			return (tempPathFile + "-b" + ImpactParam + extension).Replace("\\", "/");
		}

		private double[] CalculateFullSuppressionFactors(
			double[] qgpSuppressionFactors
			)
		{
			double[] ppPopulations = { 1.0, 0.271, 0.56, 0.105, 0.41, FeedDown3P };
			double[] ppQGPSuppressionFactors = { 1, 1, 1, 1, 1, 1 };

			double ppResult1S = BottomiumCascade.GetDimuonDecays(
				ppPopulations, ppQGPSuppressionFactors, BottomiumState.Y1S);
			double ppResult2S = BottomiumCascade.GetDimuonDecays(
				ppPopulations, ppQGPSuppressionFactors, BottomiumState.Y2S);
			double ppResult3S = BottomiumCascade.GetDimuonDecays(
				ppPopulations, ppQGPSuppressionFactors, BottomiumState.Y3S);

			double heavyIonResult1S = BottomiumCascade.GetDimuonDecays(
				ppPopulations, qgpSuppressionFactors, BottomiumState.Y1S);
			double heavyIonResult2S = BottomiumCascade.GetDimuonDecays(
				ppPopulations, qgpSuppressionFactors, BottomiumState.Y2S);
			double heavyIonResult3S = BottomiumCascade.GetDimuonDecays(
				ppPopulations, qgpSuppressionFactors, BottomiumState.Y3S);

			return new double[] {
				heavyIonResult1S / ppResult1S,
				heavyIonResult2S / ppResult2S,
				heavyIonResult3S / ppResult3S,
				( heavyIonResult2S / heavyIonResult1S ) / ( ppResult2S / ppResult1S ),
				( heavyIonResult3S / heavyIonResult1S ) / ( ppResult3S / ppResult1S )
			};
		}

        private double[][][][] CalculateQGPSuppressionFactors()
        {
            QGPSuppression qgpSuppression = new QGPSuppression(
                CreateFireballParam(), NumberCentralityBins, ImpactParamsAtBinBoundaries, JobCancelToken);
            qgpSuppression.TrackStatus(StatusValues);

            return qgpSuppression.CalculateQGPSuppressionFactors();
        }

        public void MakeSnapshots()
        {
            PrepareJob("MakeSnapshots", SnapshotStatusTitles);

            if (SnapRate <= 0)
            {
                throw new Exception("SnapRate <= 0.");
            }

            using (Fireball.Fireball fireball = CreateFireball())
            {
                BjorkenLifeTime = fireball.BjorkenLifeTime;

                //extract path and file name of outfile and extension separately
                string pathFile = BuildPlotPathFile(YburnConfigFile.OutputPath + Outfile);

                //All data is saved in the output file. Additionally, the corresponding gnuplot files (.plt)
                //are created to facilitate graphical visualization of the data.
                StringBuilder dataFileString = new StringBuilder();
                StringBuilder gnuFileStringX = new StringBuilder();
                StringBuilder gnuFileStringY = new StringBuilder();
                StringBuilder gnuFileStringXY = new StringBuilder();

                double range = GridCellSize * (NumberGridCells - 1);
                gnuFileStringX.Append(string.Format("reset\r\n\r\nset xr[0:{0,3}]\r\n\r\n",
                    range.ToString("G3")));
                gnuFileStringY.Append(string.Format("reset\r\n\r\nset xr[0:{0,3}]\r\n\r\n",
                    range.ToString("G3")));
                gnuFileStringXY.Append(string.Format("reset\r\n\r\nset xr[0:{0,3}]\r\nset yr[0:{1,3}]\r\n\r\n",
                    range.ToString("G3"), range.ToString("G3")));

                string xPlotStringBegin = "p \"" + pathFile
                    + "\" every " + NumberGridCells.ToString() + " index ";
                string xPlotStringEnd = " u 1:3 w p; pause .5";
                string yPlotStringBegin = "p \"" + pathFile
                    + "\" every ::::" + (NumberGridCells - 1).ToString() + " index ";
                string yPlotStringEnd = " u 2:3 w p; pause .5";
                string xYPlotStringBegin = "sp \"" + pathFile + "\" index ";
                string xYPlotStringEnd = " u 1:2:3 w p; pause .5";

                int index = 0;
                double dt = 1.0 / SnapRate;
                double currentTime;
                while (fireball.CentralTemperature > MinimalCentralTemperature)
                {
                    //quit here if process has been aborted
                    if (JobCancelToken.IsCancellationRequested)
                    {
                        break;
                    }

                    //advance fireball except for the first snapshot
                    if (index != 0)
                    {
                        fireball.Advance(dt);
                    }

                    //get status of calculation
                    currentTime = fireball.CurrentTime;
                    StatusValues[0] = currentTime.ToString("G3", CultureInfo.InvariantCulture);

                    dataFileString.AppendLine("\r\n\r\n#Time = "
                        + currentTime.ToString(CultureInfo.InvariantCulture) + ", Index " + index);
                    dataFileString.Append(fireball.FieldsToString(FireballFields, BottomiumStates));

                    gnuFileStringX.AppendLine(xPlotStringBegin + index + xPlotStringEnd);
                    gnuFileStringY.AppendLine(yPlotStringBegin + index + yPlotStringEnd);
                    gnuFileStringXY.AppendLine(xYPlotStringBegin + index + xYPlotStringEnd);

                    index++;
                }

                LifeTime = fireball.LifeTime;

                //append final results in the output file and exchange the old header with a new one
                LogMessages.Clear();
                LogMessages.Append(LogHeader + "#\r\n#\r\n" + LogFooter);
                dataFileString.Append(LogMessages.ToString());
                dataFileString.Insert(0, LogHeader);

                File.WriteAllText(pathFile, dataFileString.ToString());
                File.WriteAllText(pathFile + "-plotX.plt", gnuFileStringX.ToString());
                File.WriteAllText(pathFile + "-plotY.plt", gnuFileStringY.ToString());
                File.WriteAllText(pathFile + "-plotXY.plt", gnuFileStringXY.ToString());
            }
        }

        // get Bjorken- and QGP lifetime for ImpactParam = 0
        private void DetermineMaxLifeTime()
		{
			using(Fireball.Fireball fireball = CreateFireballToDetermineMaxLifeTime())
			{
				//Evolving the fireball to calculate the maximum QGP LifeTime
				while(fireball.CentralTemperature > MinimalCentralTemperature)
				{
					//quit here if process has been aborted
					if(JobCancelToken.IsCancellationRequested)
					{
						return;
					}

					fireball.Advance(0.1);
				}

				LifeTime = fireball.LifeTime;
				BjorkenLifeTime = fireball.BjorkenLifeTime;
			}
		}

        private string[][] GetCentralityBinStrings(
            )
        {
            string[][] centralityBinStrings = new string[CentralityBinBoundaries.Length][];
            for (int i = 0; i < centralityBinStrings.Length; i++)
            {
                string[] centralityBinGroup = new string[CentralityBinBoundaries[i].Length - 1];
                for(int j = 0; j < centralityBinGroup.Length; j++)
                {
                    centralityBinGroup[j] = string.Format("{0}-{1}%",
                         CentralityBinBoundaries[i][j].ToString(CultureInfo.InvariantCulture),
                         CentralityBinBoundaries[i][j + 1].ToString(CultureInfo.InvariantCulture));
                }
                centralityBinStrings[i] = centralityBinGroup;
            }

            return centralityBinStrings;
        }

		protected override void SetVariableNameValueList(
			Dictionary<string, string> nameValuePairs
			)
		{
			DecayWidthEvaluationType = TransferTool.TryGetEnum<DecayWidthEvaluationType>(nameValuePairs, "DecayWidthEvaluationType", DecayWidthEvaluationType);
			ExpansionMode = TransferTool.TryGetEnum<ExpansionMode>(nameValuePairs, "ExpansionMode", ExpansionMode);
			DecayWidthType = TransferTool.TryGetEnum<DecayWidthType>(nameValuePairs, "DecayWidthType", DecayWidthType);
			DecayWidthAveragingAngles = TransferTool.TryGetDoubleArray(nameValuePairs, "DecayWidthAveragingAngles", DecayWidthAveragingAngles);
			TemperatureProfile = TransferTool.TryGetEnum<TemperatureProfile>(nameValuePairs, "TemperatureProfile", TemperatureProfile);
			DiffusenessA = TransferTool.TryGetDouble(nameValuePairs, "DiffusenessA", DiffusenessA);
			DiffusenessB = TransferTool.TryGetDouble(nameValuePairs, "DiffusenessB", DiffusenessB);
			FireballFields = TransferTool.TryGetString(nameValuePairs, "FireballFields", FireballFields);
			ImpactParam = TransferTool.TryGetDouble(nameValuePairs, "ImpactParam", ImpactParam);
			FeedDown3P = TransferTool.TryGetDouble(nameValuePairs, "FeedDown3P", FeedDown3P);
			NucleonNumberA = TransferTool.TryGetInt(nameValuePairs, "NucleonNumberA", NucleonNumberA);
			NucleonNumberB = TransferTool.TryGetInt(nameValuePairs, "NucleonNumberB", NucleonNumberB);
			PotentialTypes = TransferTool.TryGetString(nameValuePairs, "PotentialTypes", PotentialTypes);
			TransverseMomenta = TransferTool.TryGetDoubleArray(nameValuePairs, "TransverseMomenta", TransverseMomenta);
			NuclearRadiusA = TransferTool.TryGetDouble(nameValuePairs, "NuclearRadiusA", NuclearRadiusA);
			NuclearRadiusB = TransferTool.TryGetDouble(nameValuePairs, "NuclearRadiusB", NuclearRadiusB);
			SnapRate = TransferTool.TryGetDouble(nameValuePairs, "SnapRate", SnapRate);
			CentralityBinBoundaries = TransferTool.TryGetIntArrayArray(nameValuePairs, "CentralityBinBoundaries", CentralityBinBoundaries);
			ImpactParamsAtBinBoundaries = TransferTool.TryGetDoubleArrayArray(nameValuePairs, "ImpactParamsAtBinBoundaries", ImpactParamsAtBinBoundaries);
			ParticipantsAtBinBoundaries = TransferTool.TryGetDoubleArrayArray(nameValuePairs, "ParticipantsAtBinBoundaries", ParticipantsAtBinBoundaries);
			MeanParticipantsInBin = TransferTool.TryGetDoubleArrayArray(nameValuePairs, "MeanParticipantsInBin", MeanParticipantsInBin);
			BottomiumStates = TransferTool.TryGetString(nameValuePairs, "BottomiumStates", BottomiumStates);
			InitialCentralTemperature = TransferTool.TryGetDouble(nameValuePairs, "InitialCentralTemperature", InitialCentralTemperature);
			MinimalCentralTemperature = TransferTool.TryGetDouble(nameValuePairs, "MinimalCentralTemperature", MinimalCentralTemperature);
            FormationTimes = TransferTool.TryGetDoubleArray(nameValuePairs, "FormationTimes", FormationTimes);
			ThermalTime = TransferTool.TryGetDouble(nameValuePairs, "ThermalTime", ThermalTime);
			GridCellSize = TransferTool.TryGetDouble(nameValuePairs, "GridCellSize", GridCellSize);
			NumberGridCells = TransferTool.TryGetInt(nameValuePairs, "NumberGridCells", NumberGridCells);
			BeamRapidity = TransferTool.TryGetDouble(nameValuePairs, "BeamRapidity", BeamRapidity);
			Outfile = TransferTool.TryGetString(nameValuePairs, "Outfile", Outfile);
			BjorkenLifeTime = TransferTool.TryGetDouble(nameValuePairs, "BjorkenLifeTime", BjorkenLifeTime);
			LifeTime = TransferTool.TryGetDouble(nameValuePairs, "LifeTime", LifeTime);
		}

		protected override Dictionary<string, string> GetVariableNameValueList()
		{
			Dictionary<string, string> nameValuePairs = new Dictionary<string, string>();
			nameValuePairs["DecayWidthEvaluationType"] = DecayWidthEvaluationType.ToString();
			nameValuePairs["ExpansionMode"] = ExpansionMode.ToString();
			nameValuePairs["DecayWidthType"] = DecayWidthType.ToString();
			nameValuePairs["DecayWidthAveragingAngles"] = DoubleArrayToString(DecayWidthAveragingAngles);
			nameValuePairs["TemperatureProfile"] = TemperatureProfile.ToString();
			nameValuePairs["DiffusenessA"] = DiffusenessA.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["DiffusenessB"] = DiffusenessB.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["FireballFields"] = FireballFields;
			nameValuePairs["ImpactParam"] = ImpactParam.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["FeedDown3P"] = FeedDown3P.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["NucleonNumberA"] = NucleonNumberA.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["NucleonNumberB"] = NucleonNumberB.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["PotentialTypes"] = PotentialTypes;
			nameValuePairs["TransverseMomenta"] = DoubleArrayToString(TransverseMomenta);
			nameValuePairs["NuclearRadiusA"] = NuclearRadiusA.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["NuclearRadiusB"] = NuclearRadiusB.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["SnapRate"] = SnapRate.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["CentralityBinBoundaries"] = IntArrayArrayToString(CentralityBinBoundaries);
			nameValuePairs["ImpactParamsAtBinBoundaries"] = DoubleArrayArrayToString(ImpactParamsAtBinBoundaries);
			nameValuePairs["ParticipantsAtBinBoundaries"] = DoubleArrayArrayToString(ParticipantsAtBinBoundaries);
			nameValuePairs["MeanParticipantsInBin"] = DoubleArrayArrayToString(MeanParticipantsInBin);
			nameValuePairs["BottomiumStates"] = BottomiumStates;
			nameValuePairs["InitialCentralTemperature"] = InitialCentralTemperature.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["MinimalCentralTemperature"] = MinimalCentralTemperature.ToString(CultureInfo.InvariantCulture);
            nameValuePairs["FormationTimes"] = DoubleArrayToString(FormationTimes);
			nameValuePairs["ThermalTime"] = ThermalTime.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["GridCellSize"] = GridCellSize.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["NumberGridCells"] = NumberGridCells.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["BeamRapidity"] = BeamRapidity.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["Outfile"] = Outfile;
			nameValuePairs["BjorkenLifeTime"] = BjorkenLifeTime.ToString(CultureInfo.InvariantCulture);
			nameValuePairs["LifeTime"] = LifeTime.ToString(CultureInfo.InvariantCulture);

			return nameValuePairs;
		}

		protected override string LogHeader
		{
			get
			{
				StringBuilder stringBuilder = new StringBuilder(base.LogHeader);
				AppendLogHeaderLine(stringBuilder, "BeamRapidity", BeamRapidity);
				AppendLogHeaderLine(stringBuilder, "BjorkenLifeTime", BjorkenLifeTime);
				AppendLogHeaderLine(stringBuilder, "BottomiumStates", BottomiumStates);
				AppendLogHeaderLine(stringBuilder, "CentralityBinBoundaries", CentralityBinBoundaries);
				AppendLogHeaderLine(stringBuilder, "DecayWidthAveragingAngles", DecayWidthAveragingAngles);
				AppendLogHeaderLine(stringBuilder, "DecayWidthEvaluationType", DecayWidthEvaluationType);
				AppendLogHeaderLine(stringBuilder, "DecayWidthType", DecayWidthType);
				AppendLogHeaderLine(stringBuilder, "DiffusenessA", DiffusenessA);
				AppendLogHeaderLine(stringBuilder, "DiffusenessB", DiffusenessB);
				AppendLogHeaderLine(stringBuilder, "ExpansionMode", ExpansionMode);
				AppendLogHeaderLine(stringBuilder, "FeedDown3P", FeedDown3P);
				AppendLogHeaderLine(stringBuilder, "FireballFields", FireballFields);
				AppendLogHeaderLine(stringBuilder, "GridCellSize", GridCellSize);
				AppendLogHeaderLine(stringBuilder, "ImpactParam", ImpactParam);
				AppendLogHeaderLine(stringBuilder, "ImpactParamsAtBinBoundaries", ImpactParamsAtBinBoundaries);
				AppendLogHeaderLine(stringBuilder, "InitialCentralTemperature", InitialCentralTemperature);
				AppendLogHeaderLine(stringBuilder, "LifeTime", LifeTime);
				AppendLogHeaderLine(stringBuilder, "MinimalCentralTemperature", MinimalCentralTemperature);
				AppendLogHeaderLine(stringBuilder, "NuclearRadiusA", NuclearRadiusA);
				AppendLogHeaderLine(stringBuilder, "NuclearRadiusB", NuclearRadiusB);
				AppendLogHeaderLine(stringBuilder, "NucleonNumberA", NucleonNumberA);
				AppendLogHeaderLine(stringBuilder, "NucleonNumberB", NucleonNumberB);
				AppendLogHeaderLine(stringBuilder, "NumberGridCells", NumberGridCells);
				AppendLogHeaderLine(stringBuilder, "ParticipantsAtBinBoundaries", ParticipantsAtBinBoundaries);
				AppendLogHeaderLine(stringBuilder, "MeanParticipantsInBin", MeanParticipantsInBin);
				AppendLogHeaderLine(stringBuilder, "Outfile", Outfile);
				AppendLogHeaderLine(stringBuilder, "PotentialTypes", PotentialTypes);
				AppendLogHeaderLine(stringBuilder, "SnapRate", SnapRate);
				AppendLogHeaderLine(stringBuilder, "TemperatureProfile", TemperatureProfile);
				AppendLogHeaderLine(stringBuilder, "FormationTimes", FormationTimes);
				AppendLogHeaderLine(stringBuilder, "ThermalTime", ThermalTime);
				AppendLogHeaderLine(stringBuilder, "TransverseMomenta", TransverseMomenta);

				return stringBuilder.ToString();
			}
		}
	}
}